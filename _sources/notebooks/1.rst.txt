
2: Cleaning and Profiling
=========================

.. code:: ipython3

    """ Notebook Setup/Imports
    """
    
    # Project path setup
    from pathlib import Path
    project_dir = Path(__name__).resolve().parents[1]
    
    # Library import
    import pandas as pd
    import numpy as np
    import pandas_profiling
    import plotly
    import plotly.figure_factory as ff
    
    # Print strings as markdown
    from IPython.display import Markdown
    
    # Data variables from previous notebook
    dataset = pd.read_pickle(Path.joinpath(project_dir, "data/processed/0_data.pickle"))
    data_dictionary = pd.read_pickle(Path.joinpath(project_dir, "data/processed/0_data_dictionary.pickle"))

Data Type Validation & Cleaning
-------------------------------

.. code:: ipython3

    """ Get the count for data types in the dataset
    """
    d = dataset.dtypes
    dataset.get_dtype_counts()




.. parsed-literal::

    bool         4
    float64    314
    object       9
    dtype: int64



.. code:: ipython3

    """ Find columns as strings or other objects
    """
    object_columns = d[d == 'object'].index.to_list()
    print(object_columns)


.. parsed-literal::

    ['2010 Census Population', 'Population Estimate, 2011', 'Population Estimate, 2012', 'Population Estimate, 2013', 'Population Estimate, 2014', 'Population Estimate, 2015', 'Population Estimate, 2016', 'School Breakfast Program participants FY 2011', 'School Breakfast Program participants, FY 2012']


.. code:: ipython3

    """ Parse objects to float
    """
    for column in object_columns:
        sub = dataset[column].str.replace(",","").str.replace("-","").str.strip().apply(lambda x: np.nan if x == "" else x)
        dataset[column] = sub.astype(float)

.. code:: ipython3

    """ Check types
    """
    dataset.get_dtype_counts()




.. parsed-literal::

    bool         4
    float64    323
    dtype: int64



.. code:: ipython3

    """ Save the cleaned data
    """
    dataset.to_pickle(Path.joinpath(project_dir, "data/processed/1_data.pickle"))
    data_dictionary.to_pickle(Path.joinpath(project_dir, "data/processed/1_data_dictionary.pickle"))

.. code:: ipython3

    """ Create the data profile object and save it to an HTML file
    """
    profile = pandas_profiling.ProfileReport(dataset, check_recoded=True)
    profile.to_file(outputfile = Path.joinpath(project_dir,
                                          "docs/_static/profile.html"))

Variable Selection
------------------

.. code:: ipython3

    """ Create a list of rejected variables with > .975 correlation from the profile analysis
    """
    rejected_variables = profile.get_rejected_variables(.975)

Plot USDA Model
---------------

.. code:: ipython3

    scl = ["#0000FF","#ff0000"]
    
    endpts = list(np.linspace(0,1,len(scl) -1))
    fips = dataset.index.tolist()
    values= dataset["USDA Model Percent"].tolist()
    
    fig = ff.create_choropleth(
        fips=fips,
        values=values,
        scope=['usa'], 
        binning_endpoints=endpts,
        colorscale=scl,
        show_state_data=False, 
        show_hover=False,
        centroid_marker={'opacity':0},
        asp=2.9,
        title="Food Deserts"
    )
    plotly.offline.iplot(fig, filename='choropleth_full_usa')


.. parsed-literal::

    /home/travis/virtualenv/python3.7-dev/lib/python3.7/site-packages/pandas/core/frame.py:6692: FutureWarning:
    
    Sorting because non-concatenation axis is not aligned. A future version
    of pandas will change to not sort by default.
    
    To accept the future behavior, pass 'sort=False'.
    
    To retain the current behavior and silence the warning, pass 'sort=True'.
    
    




